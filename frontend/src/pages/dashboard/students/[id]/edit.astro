---
export async function getStaticPaths() {
  const response = await fetch("http://localhost:3001/api/students");
  if (response.ok) {
    const students = await response.json();
    return students.map((student) => ({
      params: { id: student.id.toString() },
    }));
  }
}

const { id } = Astro.params;
let student = null;
try {
  const response = await fetch(`http://localhost:3001/api/students/${id}`);
  if (response.ok) {
    student = await response.json();
  } else {
    console.error("Failed to fetch student data");
  }
} catch (error) {
  console.error("Error fetching student data:", error);
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
<Fragment <<<<< HEAD
    
    
    <!--begin::Accessibility Features-->
    <!-- Skip links will be dynamically added by accessibility.js -->
    <meta name="supported-color-schemes" content="light dark" />
    <link rel="preload" href="/adminlte/css/adminlte.css" as="style" />
    <!--end::Accessibility Features-->

    <!--begin::Fonts-->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@fontsource/source-sans-3@5.0.12/index.css"
      integrity="sha256-tXJfXfp6Ewt1ilPzLDtQnJV4hclT9XuaZUKyUvmyr+Q="
      crossorigin="anonymous"
      media="print"
      onload="this.media='all'"
    />
    <!--end::Fonts-->

    <!--begin::Third Party Plugin(OverlayScrollbars)-->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/overlayscrollbars@2.11.0/styles/overlayscrollbars.min.css"
      crossorigin="anonymous"
    />
    <!--end::Third Party Plugin(OverlayScrollbars)-->

    <!--begin::Third Party Plugin(Bootstrap Icons)-->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.13.1/font/bootstrap-icons.min.css"
      crossorigin="anonymous"
    />
    <!--end::Third Party Plugin(Bootstrap Icons)-->

    <!--begin::Required Plugin(AdminLTE)-->
    <link rel="stylesheet" href="/adminlte/css/adminlte.css" />
    <!--end::Required Plugin(AdminLTE)-->

    
    <title>Student Info</title>
    <title>Esudiante Info</title>
  </head>
  <body>
    
    {
      student ? (
        <form id="editStudentForm" action="" method="PUT">

          <!--begin::Header-->
        <div class="container" style="width: 40%;">
          <div class="card card-success">
            <div class="card-header">
              <div class="card-title">Informaci贸n del estudiante</div>
            </div>
            <!--end::Header-->
            <div class"card-body">
                <input type="hidden" id="id" name="id" value={student.id} />
                <label style="margin-left: 10px;" for="name">Nombre:</label>
                <input style="margin-left: 80px;" type="text" id="name" name="name" value={student.name} />
                <br>

                <label style="margin-left: 10px;" for="cel">Celular Contacto:</label>
                <>
                  <input
                    style="margin-left: 10px;"
                    type="text"
                    id="cel"
                    name="cel"
                    value={student.cel_contact}
                  />
                  <br />
                </>
                <label style="margin-left: 10px;" for="email">Email Contacto:</label>
                <>
                  <input
                    style="margin-left: 25px;"
                    type="email"
                    id="email"
                    name="email"
                    value={student.email_contact}
                  />
                  <br />
                </>
                <label style="margin-left: 10px;" for="age">Edad:</label>
                <>
                  <input style="margin-left: 110px;" type="number" id="age" name="age" value={student.age} />
                  <br />
                </>
                <label style="margin-left: 10px;" for="deficiency">Deficiencia:</label>
                <>
                  <input
                    style="margin-left: 60px;"
                    type="text"
                    id="deficiency"
                    name="deficiency"
                    value={student.deficiency}
                  />
                  <br />
                </>

                <label for="evaluation">Evaluacion:</label>
                <br />
                <textarea name="evaluation" rows="10" cols="50" id="evaluation">
                  {JSON.stringify(student.evaluation, null, 2)}
                </textarea>
                <br />
                <button type="submit">Guardar Cambios</button>
            </div>
          </div>
          
        </form>
      ) : (
        <p>Cargando informaci贸n del estudiante...</p>
      )
    }
    <script>
      const form = document.getElementById(
        "editStudentForm"
      ) as HTMLFormElement | null;
      if (!form) throw new Error("Formulario no encontrado");

      form.addEventListener("submit", async (event) => {
        event.preventDefault(); // evitar recarga

        const formData = new FormData(form);

        // Construir objeto con los campos normales
        const data = {
          name: formData.get("name") as string,
          id: formData.get("id"),
          cel_contact: formData.get("cel") as string,
          email_contact: formData.get("email") as string,
          age: Number(formData.get("age")) as number,
          deficiency: formData.get("deficiency") as string,
          evaluation: formData.get("evaluation"),
        };

        // Parsear el textarea de evaluaci贸n

        try {
          const response = await fetch(
            `http://localhost:3001/api/students/${data.id}`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },

              body: JSON.stringify(data),
            }
          );

          if (response.ok) {
            alert("Estudiante actualizado correctamente");
            window.location.href="/tables/estudiantes";
          } else {
            let errorMsg = "Error desconocido";
            try {
              const error = await response.json();
              errorMsg = error.message || error.error || JSON.stringify(error);
            } catch {
              errorMsg = await response.text(); // si viene HTML
            }
            alert("Error enviando formulario: " + JSON.stringify(errorMsg));
          }
        } catch (err) {
          console.error(err);
          alert("Ocurri贸 un error al actualizar");
        }
      });
    </script>
  </body>
</html>
