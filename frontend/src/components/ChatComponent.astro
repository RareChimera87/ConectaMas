---
// src/components/ChatComponent.astro

interface Props {
  studentId: string;
  initialConversationId?: string;
}

const { studentId, initialConversationId } = Astro.props;
---

<div class="chat-container">
  <div class="chat-header">
    <h3>Chat con Conecta+</h3>
  </div>

  <div id="messages-container" class="messages-container">
    <div class="message message-system">
      <div class="system-message">Inicializando chat...</div>
    </div>
  </div>

  <form id="chat-form" class="message-form">
    <input
      type="text"
      id="message-input"
      placeholder="Escribe tu pregunta sobre el estudiante..."
      required
      disabled
    />
    <button type="submit" id="send-button" disabled>
      <span id="button-text">Enviar</span>
    </button>
  </form>
</div>

<script>
  const API_BASE = "http://localhost:3001/api";
  let currentConversationId: string | null =
    '<%= initialConversationId ? initialConversationId : "null" %>';
  
  if (currentConversationId === "null") {
    currentConversationId = null;
  }
  // Elementos del DOM con tipos explícitos
  let messagesContainer: HTMLElement | null;
  let messageInput: HTMLInputElement | null;
  let sendButton: HTMLButtonElement | null;
  let buttonText: HTMLElement | null;

  // Inicializar cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", () => {
    messagesContainer = document.getElementById("messages-container");
    messageInput = document.getElementById(
      "message-input"
    ) as HTMLInputElement | null;
    sendButton = document.getElementById(
      "send-button"
    ) as HTMLButtonElement | null;
    buttonText = document.getElementById("button-text");

    initializeChat();
  });

  // Inicializar chat
  async function initializeChat(): Promise<void> {
    try {
      if (!currentConversationId) {
        const response = await fetch(`${API_BASE}/chat/conversations`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${getAuthToken()}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            student_id: "<%= studentId %>",
          }),
        });

        const data = await response.json();
        if (data.success) {
          currentConversationId = data.conversation.id;
          clearMessages();
          addSystemMessage("Conversación iniciada. ¿En qué puedo ayudarte?");
        }
      } else {
        // Cargar historial existente
        await loadConversationHistory();
      }

      // Habilitar inputs
      enableInputs();
    } catch (error) {
      addSystemMessage("Error iniciando el chat. Intenta nuevamente.");
      console.error("Error inicializando chat:", error);
    }
  }

  // Enviar mensaje
  document
    .getElementById("chat-form")
    ?.addEventListener("submit", async (e) => {
      e.preventDefault();

      if (!messageInput || !sendButton || !buttonText) return;

      const message = messageInput.value.trim();
      if (!message) return;

      // Deshabilitar inputs durante el envío
      disableInputs("Enviando...");

      // Agregar mensaje del usuario
      addMessage("user", message);
      messageInput.value = "";

      try {
        const response = await fetch(`${API_BASE}/chat/messages`, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${getAuthToken()}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            conversation_id: currentConversationId,
            message: message,
          }),
        });

        const data = await response.json();

        if (data.success) {
          addMessage("assistant", data.message.content);
        } else {
          throw new Error(data.error);
        }
      } catch (error) {
        addSystemMessage("Error enviando mensaje. Intenta nuevamente.");
        console.error("Error enviando mensaje:", error);
      } finally {
        // Rehabilitar inputs
        enableInputs();
      }
    });

  function addMessage(
    role: "user" | "assistant" | "system",
    content: string
  ): void {
    if (!messagesContainer) return;

    const messageEl = document.createElement("div");
    messageEl.className = `message message-${role}`;

    if (role === "system") {
      messageEl.innerHTML = `<div class="system-message">${escapeHtml(content)}</div>`;
    } else {
      messageEl.innerHTML = `
        <div class="message-avatar ${role}"></div>
        <div class="message-content">${escapeHtml(content)}</div>
      `;
    }

    messagesContainer.appendChild(messageEl);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function addSystemMessage(content: string): void {
    addMessage("system", content);
  }

  function clearMessages(): void {
    if (messagesContainer) {
      messagesContainer.innerHTML = "";
    }
  }

  function enableInputs(): void {
    if (messageInput) messageInput.disabled = false;
    if (sendButton) sendButton.disabled = false;
    if (buttonText) buttonText.textContent = "Enviar";
    if (messageInput) messageInput.focus();
  }

  function disableInputs(buttonTextContent: string = "Enviando..."): void {
    if (messageInput) messageInput.disabled = true;
    if (sendButton) sendButton.disabled = true;
    if (buttonText) buttonText.textContent = buttonTextContent;
  }

  async function loadConversationHistory(): Promise<void> {
    if (!currentConversationId) return;

    try {
      const response = await fetch(
        `${API_BASE}/chat/conversations/${currentConversationId}`,
        {
          headers: {
            Authorization: `Bearer ${getAuthToken()}`,
          },
        }
      );

      const data = await response.json();
      if (data.success) {
        clearMessages();
        data.messages.forEach((msg: any) => {
          if (msg.role !== "system") {
            addMessage(msg.role, msg.content);
          }
        });
      }
    } catch (error) {
      console.error("Error cargando historial:", error);
    }
  }

  function getAuthToken(): string {
    // Ajusta esto según cómo manejes la autenticación
    return ""
  }

  function escapeHtml(unsafe: string): string {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }
</script>

<style>
  .chat-container {
    height: 600px;
    display: flex;
    flex-direction: column;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .chat-header {
    padding: 1rem 1.5rem;
    background: #4f46e5;
    color: white;
  }

  .chat-header h3 {
    margin: 0;
    font-size: 1.25rem;
  }

  .messages-container {
    flex: 1;
    overflow-y: auto;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .message {
    display: flex;
    gap: 0.75rem;
    max-width: 85%;
  }

  .message-user {
    align-self: flex-end;
    flex-direction: row-reverse;
  }

  .message-assistant {
    align-self: flex-start;
  }

  .message-system {
    align-self: center;
    max-width: 100%;
  }

  .message-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    flex-shrink: 0;
  }

  .message-avatar.user {
    background: #4f46e5;
  }

  .message-avatar.assistant {
    background: #10b981;
  }

  .message-content {
    padding: 0.75rem 1rem;
    border-radius: 1rem;
    background: #f3f4f6;
    line-height: 1.5;
  }

  .message-user .message-content {
    background: #4f46e5;
    color: white;
  }

  .system-message {
    text-align: center;
    color: #6b7280;
    font-style: italic;
    padding: 0.5rem;
    font-size: 0.875rem;
  }

  .message-form {
    display: flex;
    padding: 1rem 1.5rem;
    background: #f9fafb;
    border-top: 1px solid #e5e7eb;
    gap: 0.75rem;
  }

  .message-form input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 0.75rem;
    outline: none;
    transition: border-color 0.2s;
    font-size: 1rem;
  }

  .message-form input:focus {
    border-color: #4f46e5;
    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
  }

  .message-form input:disabled {
    background: #f3f4f6;
    cursor: not-allowed;
  }

  .message-form button {
    padding: 0.75rem 1.5rem;
    background: #4f46e5;
    color: white;
    border: none;
    border-radius: 0.75rem;
    cursor: pointer;
    transition: background-color 0.2s;
    font-size: 1rem;
  }

  .message-form button:hover:not(:disabled) {
    background: #4338ca;
  }

  .message-form button:disabled {
    background: #9ca3af;
    cursor: not-allowed;
  }
</style>
